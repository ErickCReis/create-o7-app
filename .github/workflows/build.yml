name: Build
on:
  push:
    branches:
      - main

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_continue: ${{ steps.compare_version.outputs.should_continue }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "version=$(grep "version" Cargo.toml | head -n1 | cut -d '"' -f2)" >> $GITHUB_OUTPUT
      - name: Compare version to NPM
        id: compare_version
        run: |
          NPM_VERSION=$(curl -s https://registry.npmjs.org/create-o7-app | jq -r '.["dist-tags"].latest')
          MY_VERSION=${{ steps.get_version.outputs.version }}
          if [ "$NPM_VERSION" == "$MY_VERSION" ]; then
            echo "NPM version is the same as the version in Cargo.toml, exiting"
            echo "should_continue=false" >> $GITHUB_OUTPUT
          else
            echo "NPM version is not the same as the version in Cargo.toml, continuing"
            echo "should_continue=true" >> $GITHUB_OUTPUT
          fi
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Run Cargo fetch
        run: cargo fetch

  build-linux:
    needs: get-version
    if: ${{ needs.get-version.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Install MUSL
        run: sudo apt-get install -y musl-tools
      - name: Build Linux
        run: cargo build --release --target x86_64-unknown-linux-musl
      - name: Compress Artifact
        run: |
          mkdir -p compressed/artifacts
          tar -czvf compressed/create-o7-app-linux.tar.gz -C target/x86_64-unknown-linux-musl/release create-o7-app
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-o7-app-linux
          path: compressed/create-o7-app-*.tar.gz

  build-macos:
    needs: get-version
    if: ${{ needs.get-version.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Cache OSXCross
        id: cache-osxcross
        uses: actions/cache@v4
        with:
          path: osxcross
          key: ${{ runner.os }}-osxcross-11.3
          save-always: true
      - name: Install OSXCross
        if: steps.cache-osxcross.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          sudo tools/get_dependencies.sh
          wget -nc https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          mv MacOSX11.3.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh
      - name: Build MacOS
        run: |
          export PATH="$(pwd)/osxcross/target/bin:$PATH"
          export LIBZ_SYS_STATIC=1
          export CC=o64-clang
          export CXX=o64-clang++
          cargo build --release --target x86_64-apple-darwin
      - name: Compress Artifact
        run: |
          mkdir -p compressed/artifacts
          tar -czvf compressed/create-o7-app-macos.tar.gz -C target/x86_64-apple-darwin/release create-o7-app
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-o7-app-macos-x86_64
          path: compressed/create-o7-app-*.tar.gz

  build-macos-arm64:
    needs: get-version
    if: ${{ needs.get-version.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Cache OSXCross
        id: cache-osxcross
        uses: actions/cache@v4
        with:
          path: osxcross
          key: ${{ runner.os }}-osxcross-11.3
          save-always: true
      - name: Install OSXCross
        if: steps.cache-osxcross.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          sudo tools/get_dependencies.sh
          wget -nc https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          mv MacOSX11.3.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh
      - name: Build MacOS
        run: |
          export PATH="$(pwd)/osxcross/target/bin:$PATH"
          export LIBZ_SYS_STATIC=1
          export CC=o64-clang
          export CXX=o64-clang++
          cargo build --release --target aarch64-apple-darwin
      - name: Compress Artifact
        run: |
          mkdir -p compressed/artifacts
          tar -czvf compressed/create-o7-app-macos-arm64.tar.gz -C target/aarch64-apple-darwin/release create-o7-app
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-o7-app-macos-aarch64
          path: compressed/create-o7-app-*.tar.gz

  build-windows:
    needs: get-version
    if: ${{ needs.get-version.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Install MinGW
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64
      - name: Build Windows
        run: cargo build --release --target x86_64-pc-windows-gnu
      - name: Compress Artifact
        run: |
          mkdir -p compressed/artifacts
          tar -czvf compressed/create-o7-app-win64.exe.tar.gz -C target/x86_64-pc-windows-gnu/release create-o7-app.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-o7-app-windows-x86_64
          path: compressed/create-o7-app-*.tar.gz

  build-windows-32:
    needs: get-version
    if: ${{ needs.get-version.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: i686-pc-windows-gnu
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
      - name: Install MinGW
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-i686
      - name: Build Windows
        run: cargo build --release --target i686-pc-windows-gnu
      - name: Compress Artifact
        run: |
          mkdir -p compressed/artifacts
          tar -czvf compressed/create-o7-app-win32.exe.tar.gz -C target/i686-pc-windows-gnu/release create-o7-app.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-o7-app-windows-i686
          path: compressed/create-o7-app-*.tar.gz

  release:
    needs:
      - get-version
      - build-linux
      - build-macos
      - build-macos-arm64
      - build-windows
      - build-windows-32
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Generate changelogs
        run: |
          # Full changelog
          pnpx git-cliff --tag ${{ needs.get-version.outputs.version }} -o CHANGELOG.md
          # Changelog for the release
          pnpx git-cliff --tag ${{ needs.get-version.outputs.version }} --unreleased --strip header -o CHANGELOG-release.md
      - name: Commit changelog
        run: |
          git add CHANGELOG.md
          git config --local user.email "create-o7-app@users.noreply.github.com"
          git config --local user.name "create-o7-app[bot]"
          git commit -m "ci: Update changelog for ${{ needs.get-version.outputs.version }}"
          git push
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: create-o7-app-*
          path: artifacts
          merge-multiple: true
      - name: Release Binaries
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG-release.md
          tag_name: ${{ needs.get-version.outputs.version }}
          files: artifacts/create-o7-app-*.tar.gz
      - name: Publish NPM Package
        run: |
          cd pkg
          cp ../README.md .
          jq '.version = "${{ needs.get-version.outputs.version }}"' package.json > tmp && mv tmp package.json
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          npm publish
